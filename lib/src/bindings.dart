// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to libvips
class Libvips {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Libvips(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Libvips.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signal_ptr = _lookup<ffi.NativeFunction<_c_signal>>('signal');
  late final _dart_signal _signal = _signal_ptr.asFunction<_dart_signal>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriority_ptr =
      _lookup<ffi.NativeFunction<_c_getpriority>>('getpriority');
  late final _dart_getpriority _getpriority =
      _getpriority_ptr.asFunction<_dart_getpriority>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_np_ptr =
      _lookup<ffi.NativeFunction<_c_getiopolicy_np>>('getiopolicy_np');
  late final _dart_getiopolicy_np _getiopolicy_np =
      _getiopolicy_np_ptr.asFunction<_dart_getiopolicy_np>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimit_ptr =
      _lookup<ffi.NativeFunction<_c_getrlimit>>('getrlimit');
  late final _dart_getrlimit _getrlimit =
      _getrlimit_ptr.asFunction<_dart_getrlimit>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusage_ptr =
      _lookup<ffi.NativeFunction<_c_getrusage>>('getrusage');
  late final _dart_getrusage _getrusage =
      _getrusage_ptr.asFunction<_dart_getrusage>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriority_ptr =
      _lookup<ffi.NativeFunction<_c_setpriority>>('setpriority');
  late final _dart_setpriority _setpriority =
      _setpriority_ptr.asFunction<_dart_setpriority>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_np_ptr =
      _lookup<ffi.NativeFunction<_c_setiopolicy_np>>('setiopolicy_np');
  late final _dart_setiopolicy_np _setiopolicy_np =
      _setiopolicy_np_ptr.asFunction<_dart_setiopolicy_np>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimit_ptr =
      _lookup<ffi.NativeFunction<_c_setrlimit>>('setrlimit');
  late final _dart_setrlimit _setrlimit =
      _setrlimit_ptr.asFunction<_dart_setrlimit>();

  int wait(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _wait(
      arg0,
    );
  }

  late final _wait_ptr = _lookup<ffi.NativeFunction<_c_wait>>('wait');
  late final _dart_wait _wait = _wait_ptr.asFunction<_dart_wait>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpid_ptr = _lookup<ffi.NativeFunction<_c_waitpid>>('waitpid');
  late final _dart_waitpid _waitpid = _waitpid_ptr.asFunction<_dart_waitpid>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitid_ptr = _lookup<ffi.NativeFunction<_c_waitid>>('waitid');
  late final _dart_waitid _waitid = _waitid_ptr.asFunction<_dart_waitid>();

  int wait3(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3_ptr = _lookup<ffi.NativeFunction<_c_wait3>>('wait3');
  late final _dart_wait3 _wait3 = _wait3_ptr.asFunction<_dart_wait3>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4_ptr = _lookup<ffi.NativeFunction<_c_wait4>>('wait4');
  late final _dart_wait4 _wait4 = _wait4_ptr.asFunction<_dart_wait4>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _alloca_ptr = _lookup<ffi.NativeFunction<_c_alloca>>('alloca');
  late final _dart_alloca _alloca = _alloca_ptr.asFunction<_dart_alloca>();

  late final ffi.Pointer<ffi.Int32> ___mb_cur_max =
      _lookup<ffi.Int32>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _malloc_ptr = _lookup<ffi.NativeFunction<_c_malloc>>('malloc');
  late final _dart_malloc _malloc = _malloc_ptr.asFunction<_dart_malloc>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _calloc_ptr = _lookup<ffi.NativeFunction<_c_calloc>>('calloc');
  late final _dart_calloc _calloc = _calloc_ptr.asFunction<_dart_calloc>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _free_ptr = _lookup<ffi.NativeFunction<_c_free>>('free');
  late final _dart_free _free = _free_ptr.asFunction<_dart_free>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _realloc_ptr = _lookup<ffi.NativeFunction<_c_realloc>>('realloc');
  late final _dart_realloc _realloc = _realloc_ptr.asFunction<_dart_realloc>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _valloc_ptr = _lookup<ffi.NativeFunction<_c_valloc>>('valloc');
  late final _dart_valloc _valloc = _valloc_ptr.asFunction<_dart_valloc>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_aligned_alloc>>('aligned_alloc');
  late final _dart_aligned_alloc _aligned_alloc =
      _aligned_alloc_ptr.asFunction<_dart_aligned_alloc>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign_ptr =
      _lookup<ffi.NativeFunction<_c_posix_memalign>>('posix_memalign');
  late final _dart_posix_memalign _posix_memalign =
      _posix_memalign_ptr.asFunction<_dart_posix_memalign>();

  void abort() {
    return _abort();
  }

  late final _abort_ptr = _lookup<ffi.NativeFunction<_c_abort>>('abort');
  late final _dart_abort _abort = _abort_ptr.asFunction<_dart_abort>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _abs_ptr = _lookup<ffi.NativeFunction<_c_abs>>('abs');
  late final _dart_abs _abs = _abs_ptr.asFunction<_dart_abs>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexit_ptr = _lookup<ffi.NativeFunction<_c_atexit>>('atexit');
  late final _dart_atexit _atexit = _atexit_ptr.asFunction<_dart_atexit>();

  double atof(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atof_ptr = _lookup<ffi.NativeFunction<_c_atof>>('atof');
  late final _dart_atof _atof = _atof_ptr.asFunction<_dart_atof>();

  int atoi(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoi_ptr = _lookup<ffi.NativeFunction<_c_atoi>>('atoi');
  late final _dart_atoi _atoi = _atoi_ptr.asFunction<_dart_atoi>();

  int atol(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atol_ptr = _lookup<ffi.NativeFunction<_c_atol>>('atol');
  late final _dart_atol _atol = _atol_ptr.asFunction<_dart_atol>();

  int atoll(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atoll_ptr = _lookup<ffi.NativeFunction<_c_atoll>>('atoll');
  late final _dart_atoll _atoll = _atoll_ptr.asFunction<_dart_atoll>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearch_ptr = _lookup<ffi.NativeFunction<_c_bsearch>>('bsearch');
  late final _dart_bsearch _bsearch = _bsearch_ptr.asFunction<_dart_bsearch>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _div_ptr = _lookup<ffi.NativeFunction<_c_div>>('div');
  late final _dart_div _div = _div_ptr.asFunction<_dart_div>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exit_ptr = _lookup<ffi.NativeFunction<_c_exit>>('exit');
  late final _dart_exit _exit = _exit_ptr.asFunction<_dart_exit>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenv_ptr = _lookup<ffi.NativeFunction<_c_getenv>>('getenv');
  late final _dart_getenv _getenv = _getenv_ptr.asFunction<_dart_getenv>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labs_ptr = _lookup<ffi.NativeFunction<_c_labs>>('labs');
  late final _dart_labs _labs = _labs_ptr.asFunction<_dart_labs>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldiv_ptr = _lookup<ffi.NativeFunction<_c_ldiv>>('ldiv');
  late final _dart_ldiv _ldiv = _ldiv_ptr.asFunction<_dart_ldiv>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabs_ptr = _lookup<ffi.NativeFunction<_c_llabs>>('llabs');
  late final _dart_llabs _llabs = _llabs_ptr.asFunction<_dart_llabs>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldiv_ptr = _lookup<ffi.NativeFunction<_c_lldiv>>('lldiv');
  late final _dart_lldiv _lldiv = _lldiv_ptr.asFunction<_dart_lldiv>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblen_ptr = _lookup<ffi.NativeFunction<_c_mblen>>('mblen');
  late final _dart_mblen _mblen = _mblen_ptr.asFunction<_dart_mblen>();

  int mbstowcs(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcs_ptr =
      _lookup<ffi.NativeFunction<_c_mbstowcs>>('mbstowcs');
  late final _dart_mbstowcs _mbstowcs =
      _mbstowcs_ptr.asFunction<_dart_mbstowcs>();

  int mbtowc(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowc_ptr = _lookup<ffi.NativeFunction<_c_mbtowc>>('mbtowc');
  late final _dart_mbtowc _mbtowc = _mbtowc_ptr.asFunction<_dart_mbtowc>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsort_ptr = _lookup<ffi.NativeFunction<_c_qsort>>('qsort');
  late final _dart_qsort _qsort = _qsort_ptr.asFunction<_dart_qsort>();

  int rand() {
    return _rand();
  }

  late final _rand_ptr = _lookup<ffi.NativeFunction<_c_rand>>('rand');
  late final _dart_rand _rand = _rand_ptr.asFunction<_dart_rand>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srand_ptr = _lookup<ffi.NativeFunction<_c_srand>>('srand');
  late final _dart_srand _srand = _srand_ptr.asFunction<_dart_srand>();

  double strtod(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtod_ptr = _lookup<ffi.NativeFunction<_c_strtod>>('strtod');
  late final _dart_strtod _strtod = _strtod_ptr.asFunction<_dart_strtod>();

  double strtof(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtof_ptr = _lookup<ffi.NativeFunction<_c_strtof>>('strtof');
  late final _dart_strtof _strtof = _strtof_ptr.asFunction<_dart_strtof>();

  int strtol(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtol_ptr = _lookup<ffi.NativeFunction<_c_strtol>>('strtol');
  late final _dart_strtol _strtol = _strtol_ptr.asFunction<_dart_strtol>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoll_ptr = _lookup<ffi.NativeFunction<_c_strtoll>>('strtoll');
  late final _dart_strtoll _strtoll = _strtoll_ptr.asFunction<_dart_strtoll>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoul_ptr = _lookup<ffi.NativeFunction<_c_strtoul>>('strtoul');
  late final _dart_strtoul _strtoul = _strtoul_ptr.asFunction<_dart_strtoul>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoull_ptr =
      _lookup<ffi.NativeFunction<_c_strtoull>>('strtoull');
  late final _dart_strtoull _strtoull =
      _strtoull_ptr.asFunction<_dart_strtoull>();

  int system(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _system_ptr = _lookup<ffi.NativeFunction<_c_system>>('system');
  late final _dart_system _system = _system_ptr.asFunction<_dart_system>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombs_ptr =
      _lookup<ffi.NativeFunction<_c_wcstombs>>('wcstombs');
  late final _dart_wcstombs _wcstombs =
      _wcstombs_ptr.asFunction<_dart_wcstombs>();

  int wctomb(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctomb_ptr = _lookup<ffi.NativeFunction<_c_wctomb>>('wctomb');
  late final _dart_wctomb _wctomb = _wctomb_ptr.asFunction<_dart_wctomb>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __Exit_ptr = _lookup<ffi.NativeFunction<_c__Exit>>('_Exit');
  late final _dart__Exit __Exit = __Exit_ptr.asFunction<_dart__Exit>();

  int a64l(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64l_ptr = _lookup<ffi.NativeFunction<_c_a64l>>('a64l');
  late final _dart_a64l _a64l = _a64l_ptr.asFunction<_dart_a64l>();

  double drand48() {
    return _drand48();
  }

  late final _drand48_ptr = _lookup<ffi.NativeFunction<_c_drand48>>('drand48');
  late final _dart_drand48 _drand48 = _drand48_ptr.asFunction<_dart_drand48>();

  ffi.Pointer<ffi.Int8> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvt_ptr = _lookup<ffi.NativeFunction<_c_ecvt>>('ecvt');
  late final _dart_ecvt _ecvt = _ecvt_ptr.asFunction<_dart_ecvt>();

  double erand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48_ptr = _lookup<ffi.NativeFunction<_c_erand48>>('erand48');
  late final _dart_erand48 _erand48 = _erand48_ptr.asFunction<_dart_erand48>();

  ffi.Pointer<ffi.Int8> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvt_ptr = _lookup<ffi.NativeFunction<_c_fcvt>>('fcvt');
  late final _dart_fcvt _fcvt = _fcvt_ptr.asFunction<_dart_fcvt>();

  ffi.Pointer<ffi.Int8> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvt_ptr = _lookup<ffi.NativeFunction<_c_gcvt>>('gcvt');
  late final _dart_gcvt _gcvt = _gcvt_ptr.asFunction<_dart_gcvt>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsubopt_ptr =
      _lookup<ffi.NativeFunction<_c_getsubopt>>('getsubopt');
  late final _dart_getsubopt _getsubopt =
      _getsubopt_ptr.asFunction<_dart_getsubopt>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantpt_ptr = _lookup<ffi.NativeFunction<_c_grantpt>>('grantpt');
  late final _dart_grantpt _grantpt = _grantpt_ptr.asFunction<_dart_grantpt>();

  ffi.Pointer<ffi.Int8> initstate(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstate_ptr =
      _lookup<ffi.NativeFunction<_c_initstate>>('initstate');
  late final _dart_initstate _initstate =
      _initstate_ptr.asFunction<_dart_initstate>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48_ptr = _lookup<ffi.NativeFunction<_c_jrand48>>('jrand48');
  late final _dart_jrand48 _jrand48 = _jrand48_ptr.asFunction<_dart_jrand48>();

  ffi.Pointer<ffi.Int8> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64a_ptr = _lookup<ffi.NativeFunction<_c_l64a>>('l64a');
  late final _dart_l64a _l64a = _l64a_ptr.asFunction<_dart_l64a>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48_ptr = _lookup<ffi.NativeFunction<_c_lcong48>>('lcong48');
  late final _dart_lcong48 _lcong48 = _lcong48_ptr.asFunction<_dart_lcong48>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48_ptr = _lookup<ffi.NativeFunction<_c_lrand48>>('lrand48');
  late final _dart_lrand48 _lrand48 = _lrand48_ptr.asFunction<_dart_lrand48>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktemp_ptr = _lookup<ffi.NativeFunction<_c_mktemp>>('mktemp');
  late final _dart_mktemp _mktemp = _mktemp_ptr.asFunction<_dart_mktemp>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstemp_ptr = _lookup<ffi.NativeFunction<_c_mkstemp>>('mkstemp');
  late final _dart_mkstemp _mkstemp = _mkstemp_ptr.asFunction<_dart_mkstemp>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48_ptr = _lookup<ffi.NativeFunction<_c_mrand48>>('mrand48');
  late final _dart_mrand48 _mrand48 = _mrand48_ptr.asFunction<_dart_mrand48>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48_ptr = _lookup<ffi.NativeFunction<_c_nrand48>>('nrand48');
  late final _dart_nrand48 _nrand48 = _nrand48_ptr.asFunction<_dart_nrand48>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openpt_ptr =
      _lookup<ffi.NativeFunction<_c_posix_openpt>>('posix_openpt');
  late final _dart_posix_openpt _posix_openpt =
      _posix_openpt_ptr.asFunction<_dart_posix_openpt>();

  ffi.Pointer<ffi.Int8> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsname_ptr = _lookup<ffi.NativeFunction<_c_ptsname>>('ptsname');
  late final _dart_ptsname _ptsname = _ptsname_ptr.asFunction<_dart_ptsname>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Int8> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_r_ptr =
      _lookup<ffi.NativeFunction<_c_ptsname_r>>('ptsname_r');
  late final _dart_ptsname_r _ptsname_r =
      _ptsname_r_ptr.asFunction<_dart_ptsname_r>();

  int putenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenv_ptr = _lookup<ffi.NativeFunction<_c_putenv>>('putenv');
  late final _dart_putenv _putenv = _putenv_ptr.asFunction<_dart_putenv>();

  int random() {
    return _random();
  }

  late final _random_ptr = _lookup<ffi.NativeFunction<_c_random>>('random');
  late final _dart_random _random = _random_ptr.asFunction<_dart_random>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_r_ptr = _lookup<ffi.NativeFunction<_c_rand_r>>('rand_r');
  late final _dart_rand_r _rand_r = _rand_r_ptr.asFunction<_dart_rand_r>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpath_ptr =
      _lookup<ffi.NativeFunction<_c_realpath>>('realpath');
  late final _dart_realpath _realpath =
      _realpath_ptr.asFunction<_dart_realpath>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48_ptr = _lookup<ffi.NativeFunction<_c_seed48>>('seed48');
  late final _dart_seed48 _seed48 = _seed48_ptr.asFunction<_dart_seed48>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenv_ptr = _lookup<ffi.NativeFunction<_c_setenv>>('setenv');
  late final _dart_setenv _setenv = _setenv_ptr.asFunction<_dart_setenv>();

  void setkey(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkey_ptr = _lookup<ffi.NativeFunction<_c_setkey>>('setkey');
  late final _dart_setkey _setkey = _setkey_ptr.asFunction<_dart_setkey>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstate_ptr =
      _lookup<ffi.NativeFunction<_c_setstate>>('setstate');
  late final _dart_setstate _setstate =
      _setstate_ptr.asFunction<_dart_setstate>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48_ptr = _lookup<ffi.NativeFunction<_c_srand48>>('srand48');
  late final _dart_srand48 _srand48 = _srand48_ptr.asFunction<_dart_srand48>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandom_ptr = _lookup<ffi.NativeFunction<_c_srandom>>('srandom');
  late final _dart_srandom _srandom = _srandom_ptr.asFunction<_dart_srandom>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockpt_ptr =
      _lookup<ffi.NativeFunction<_c_unlockpt>>('unlockpt');
  late final _dart_unlockpt _unlockpt =
      _unlockpt_ptr.asFunction<_dart_unlockpt>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenv_ptr =
      _lookup<ffi.NativeFunction<_c_unsetenv>>('unsetenv');
  late final _dart_unsetenv _unsetenv =
      _unsetenv_ptr.asFunction<_dart_unsetenv>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4random_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random>>('arc4random');
  late final _dart_arc4random _arc4random =
      _arc4random_ptr.asFunction<_dart_arc4random>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandom_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_addrandom>>(
          'arc4random_addrandom');
  late final _dart_arc4random_addrandom _arc4random_addrandom =
      _arc4random_addrandom_ptr.asFunction<_dart_arc4random_addrandom>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_buf_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_buf>>('arc4random_buf');
  late final _dart_arc4random_buf _arc4random_buf =
      _arc4random_buf_ptr.asFunction<_dart_arc4random_buf>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stir_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_stir>>('arc4random_stir');
  late final _dart_arc4random_stir _arc4random_stir =
      _arc4random_stir_ptr.asFunction<_dart_arc4random_stir>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniform_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_uniform>>('arc4random_uniform');
  late final _dart_arc4random_uniform _arc4random_uniform =
      _arc4random_uniform_ptr.asFunction<_dart_arc4random_uniform>();

  ffi.Pointer<ffi.Int8> cgetcap(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcap_ptr = _lookup<ffi.NativeFunction<_c_cgetcap>>('cgetcap');
  late final _dart_cgetcap _cgetcap = _cgetcap_ptr.asFunction<_dart_cgetcap>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclose_ptr =
      _lookup<ffi.NativeFunction<_c_cgetclose>>('cgetclose');
  late final _dart_cgetclose _cgetclose =
      _cgetclose_ptr.asFunction<_dart_cgetclose>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetent_ptr = _lookup<ffi.NativeFunction<_c_cgetent>>('cgetent');
  late final _dart_cgetent _cgetent = _cgetent_ptr.asFunction<_dart_cgetent>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirst_ptr =
      _lookup<ffi.NativeFunction<_c_cgetfirst>>('cgetfirst');
  late final _dart_cgetfirst _cgetfirst =
      _cgetfirst_ptr.asFunction<_dart_cgetfirst>();

  int cgetmatch(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatch_ptr =
      _lookup<ffi.NativeFunction<_c_cgetmatch>>('cgetmatch');
  late final _dart_cgetmatch _cgetmatch =
      _cgetmatch_ptr.asFunction<_dart_cgetmatch>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnext_ptr =
      _lookup<ffi.NativeFunction<_c_cgetnext>>('cgetnext');
  late final _dart_cgetnext _cgetnext =
      _cgetnext_ptr.asFunction<_dart_cgetnext>();

  int cgetnum(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int64> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnum_ptr = _lookup<ffi.NativeFunction<_c_cgetnum>>('cgetnum');
  late final _dart_cgetnum _cgetnum = _cgetnum_ptr.asFunction<_dart_cgetnum>();

  int cgetset(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetset_ptr = _lookup<ffi.NativeFunction<_c_cgetset>>('cgetset');
  late final _dart_cgetset _cgetset = _cgetset_ptr.asFunction<_dart_cgetset>();

  int cgetstr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstr_ptr = _lookup<ffi.NativeFunction<_c_cgetstr>>('cgetstr');
  late final _dart_cgetstr _cgetstr = _cgetstr_ptr.asFunction<_dart_cgetstr>();

  int cgetustr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustr_ptr =
      _lookup<ffi.NativeFunction<_c_cgetustr>>('cgetustr');
  late final _dart_cgetustr _cgetustr =
      _cgetustr_ptr.asFunction<_dart_cgetustr>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemon_ptr = _lookup<ffi.NativeFunction<_c_daemon>>('daemon');
  late final _dart_daemon _daemon = _daemon_ptr.asFunction<_dart_daemon>();

  ffi.Pointer<ffi.Int8> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devname_ptr = _lookup<ffi.NativeFunction<_c_devname>>('devname');
  late final _dart_devname _devname = _devname_ptr.asFunction<_dart_devname>();

  ffi.Pointer<ffi.Int8> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_r_ptr =
      _lookup<ffi.NativeFunction<_c_devname_r>>('devname_r');
  late final _dart_devname_r _devname_r =
      _devname_r_ptr.asFunction<_dart_devname_r>();

  ffi.Pointer<ffi.Int8> getbsize(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsize_ptr =
      _lookup<ffi.NativeFunction<_c_getbsize>>('getbsize');
  late final _dart_getbsize _getbsize =
      _getbsize_ptr.asFunction<_dart_getbsize>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavg_ptr =
      _lookup<ffi.NativeFunction<_c_getloadavg>>('getloadavg');
  late final _dart_getloadavg _getloadavg =
      _getloadavg_ptr.asFunction<_dart_getloadavg>();

  ffi.Pointer<ffi.Int8> getprogname() {
    return _getprogname();
  }

  late final _getprogname_ptr =
      _lookup<ffi.NativeFunction<_c_getprogname>>('getprogname');
  late final _dart_getprogname _getprogname =
      _getprogname_ptr.asFunction<_dart_getprogname>();

  void setprogname(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprogname_ptr =
      _lookup<ffi.NativeFunction<_c_setprogname>>('setprogname');
  late final _dart_setprogname _setprogname =
      _setprogname_ptr.asFunction<_dart_setprogname>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsort_ptr =
      _lookup<ffi.NativeFunction<_c_heapsort>>('heapsort');
  late final _dart_heapsort _heapsort =
      _heapsort_ptr.asFunction<_dart_heapsort>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesort_ptr =
      _lookup<ffi.NativeFunction<_c_mergesort>>('mergesort');
  late final _dart_mergesort _mergesort =
      _mergesort_ptr.asFunction<_dart_mergesort>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psort_ptr = _lookup<ffi.NativeFunction<_c_psort>>('psort');
  late final _dart_psort _psort = _psort_ptr.asFunction<_dart_psort>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_r_ptr = _lookup<ffi.NativeFunction<_c_psort_r>>('psort_r');
  late final _dart_psort_r _psort_r = _psort_r_ptr.asFunction<_dart_psort_r>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_r_ptr = _lookup<ffi.NativeFunction<_c_qsort_r>>('qsort_r');
  late final _dart_qsort_r _qsort_r = _qsort_r_ptr.asFunction<_dart_qsort_r>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsort_ptr =
      _lookup<ffi.NativeFunction<_c_radixsort>>('radixsort');
  late final _dart_radixsort _radixsort =
      _radixsort_ptr.asFunction<_dart_radixsort>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatch_ptr = _lookup<ffi.NativeFunction<_c_rpmatch>>('rpmatch');
  late final _dart_rpmatch _rpmatch = _rpmatch_ptr.asFunction<_dart_rpmatch>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsort_ptr =
      _lookup<ffi.NativeFunction<_c_sradixsort>>('sradixsort');
  late final _dart_sradixsort _sradixsort =
      _sradixsort_ptr.asFunction<_dart_sradixsort>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddev_ptr =
      _lookup<ffi.NativeFunction<_c_sranddev>>('sranddev');
  late final _dart_sranddev _sranddev =
      _sranddev_ptr.asFunction<_dart_sranddev>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdev_ptr =
      _lookup<ffi.NativeFunction<_c_srandomdev>>('srandomdev');
  late final _dart_srandomdev _srandomdev =
      _srandomdev_ptr.asFunction<_dart_srandomdev>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocf_ptr =
      _lookup<ffi.NativeFunction<_c_reallocf>>('reallocf');
  late final _dart_reallocf _reallocf =
      _reallocf_ptr.asFunction<_dart_reallocf>();

  int strtonum(
    ffi.Pointer<ffi.Int8> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonum_ptr =
      _lookup<ffi.NativeFunction<_c_strtonum>>('strtonum');
  late final _dart_strtonum _strtonum =
      _strtonum_ptr.asFunction<_dart_strtonum>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoq_ptr = _lookup<ffi.NativeFunction<_c_strtoq>>('strtoq');
  late final _dart_strtoq _strtoq = _strtoq_ptr.asFunction<_dart_strtoq>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouq_ptr = _lookup<ffi.NativeFunction<_c_strtouq>>('strtouq');
  late final _dart_strtouq _strtouq = _strtouq_ptr.asFunction<_dart_strtouq>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Int8>>('suboptarg');

  ffi.Pointer<ffi.Int8> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Int8> value) => _suboptarg.value = value;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr_ptr = _lookup<ffi.NativeFunction<_c_memchr>>('memchr');
  late final _dart_memchr _memchr = _memchr_ptr.asFunction<_dart_memchr>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp_ptr = _lookup<ffi.NativeFunction<_c_memcmp>>('memcmp');
  late final _dart_memcmp _memcmp = _memcmp_ptr.asFunction<_dart_memcmp>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpy_ptr = _lookup<ffi.NativeFunction<_c_memcpy>>('memcpy');
  late final _dart_memcpy _memcpy = _memcpy_ptr.asFunction<_dart_memcpy>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmove_ptr = _lookup<ffi.NativeFunction<_c_memmove>>('memmove');
  late final _dart_memmove _memmove = _memmove_ptr.asFunction<_dart_memmove>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memset_ptr = _lookup<ffi.NativeFunction<_c_memset>>('memset');
  late final _dart_memset _memset = _memset_ptr.asFunction<_dart_memset>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcat_ptr = _lookup<ffi.NativeFunction<_c_strcat>>('strcat');
  late final _dart_strcat _strcat = _strcat_ptr.asFunction<_dart_strcat>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchr_ptr = _lookup<ffi.NativeFunction<_c_strchr>>('strchr');
  late final _dart_strchr _strchr = _strchr_ptr.asFunction<_dart_strchr>();

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmp_ptr = _lookup<ffi.NativeFunction<_c_strcmp>>('strcmp');
  late final _dart_strcmp _strcmp = _strcmp_ptr.asFunction<_dart_strcmp>();

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcoll_ptr = _lookup<ffi.NativeFunction<_c_strcoll>>('strcoll');
  late final _dart_strcoll _strcoll = _strcoll_ptr.asFunction<_dart_strcoll>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpy_ptr = _lookup<ffi.NativeFunction<_c_strcpy>>('strcpy');
  late final _dart_strcpy _strcpy = _strcpy_ptr.asFunction<_dart_strcpy>();

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspn_ptr = _lookup<ffi.NativeFunction<_c_strcspn>>('strcspn');
  late final _dart_strcspn _strcspn = _strcspn_ptr.asFunction<_dart_strcspn>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerror_ptr =
      _lookup<ffi.NativeFunction<_c_strerror>>('strerror');
  late final _dart_strerror _strerror =
      _strerror_ptr.asFunction<_dart_strerror>();

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlen_ptr = _lookup<ffi.NativeFunction<_c_strlen>>('strlen');
  late final _dart_strlen _strlen = _strlen_ptr.asFunction<_dart_strlen>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncat_ptr = _lookup<ffi.NativeFunction<_c_strncat>>('strncat');
  late final _dart_strncat _strncat = _strncat_ptr.asFunction<_dart_strncat>();

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp_ptr = _lookup<ffi.NativeFunction<_c_strncmp>>('strncmp');
  late final _dart_strncmp _strncmp = _strncmp_ptr.asFunction<_dart_strncmp>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpy_ptr = _lookup<ffi.NativeFunction<_c_strncpy>>('strncpy');
  late final _dart_strncpy _strncpy = _strncpy_ptr.asFunction<_dart_strncpy>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrk_ptr = _lookup<ffi.NativeFunction<_c_strpbrk>>('strpbrk');
  late final _dart_strpbrk _strpbrk = _strpbrk_ptr.asFunction<_dart_strpbrk>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchr_ptr = _lookup<ffi.NativeFunction<_c_strrchr>>('strrchr');
  late final _dart_strrchr _strrchr = _strrchr_ptr.asFunction<_dart_strrchr>();

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspn_ptr = _lookup<ffi.NativeFunction<_c_strspn>>('strspn');
  late final _dart_strspn _strspn = _strspn_ptr.asFunction<_dart_strspn>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstr_ptr = _lookup<ffi.NativeFunction<_c_strstr>>('strstr');
  late final _dart_strstr _strstr = _strstr_ptr.asFunction<_dart_strstr>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtok_ptr = _lookup<ffi.NativeFunction<_c_strtok>>('strtok');
  late final _dart_strtok _strtok = _strtok_ptr.asFunction<_dart_strtok>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrm_ptr = _lookup<ffi.NativeFunction<_c_strxfrm>>('strxfrm');
  late final _dart_strxfrm _strxfrm = _strxfrm_ptr.asFunction<_dart_strxfrm>();

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_r_ptr =
      _lookup<ffi.NativeFunction<_c_strtok_r>>('strtok_r');
  late final _dart_strtok_r _strtok_r =
      _strtok_r_ptr.asFunction<_dart_strtok_r>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_r_ptr =
      _lookup<ffi.NativeFunction<_c_strerror_r>>('strerror_r');
  late final _dart_strerror_r _strerror_r =
      _strerror_r_ptr.asFunction<_dart_strerror_r>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdup_ptr = _lookup<ffi.NativeFunction<_c_strdup>>('strdup');
  late final _dart_strdup _strdup = _strdup_ptr.asFunction<_dart_strdup>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy_ptr = _lookup<ffi.NativeFunction<_c_memccpy>>('memccpy');
  late final _dart_memccpy _memccpy = _memccpy_ptr.asFunction<_dart_memccpy>();

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpy_ptr = _lookup<ffi.NativeFunction<_c_stpcpy>>('stpcpy');
  late final _dart_stpcpy _stpcpy = _stpcpy_ptr.asFunction<_dart_stpcpy>();

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpy_ptr = _lookup<ffi.NativeFunction<_c_stpncpy>>('stpncpy');
  late final _dart_stpncpy _stpncpy = _stpncpy_ptr.asFunction<_dart_stpncpy>();

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndup_ptr = _lookup<ffi.NativeFunction<_c_strndup>>('strndup');
  late final _dart_strndup _strndup = _strndup_ptr.asFunction<_dart_strndup>();

  int strnlen(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlen_ptr = _lookup<ffi.NativeFunction<_c_strnlen>>('strnlen');
  late final _dart_strnlen _strnlen = _strnlen_ptr.asFunction<_dart_strnlen>();

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignal_ptr =
      _lookup<ffi.NativeFunction<_c_strsignal>>('strsignal');
  late final _dart_strsignal _strsignal =
      _strsignal_ptr.asFunction<_dart_strsignal>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_s_ptr =
      _lookup<ffi.NativeFunction<_c_memset_s>>('memset_s');
  late final _dart_memset_s _memset_s =
      _memset_s_ptr.asFunction<_dart_memset_s>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmem_ptr = _lookup<ffi.NativeFunction<_c_memmem>>('memmem');
  late final _dart_memmem _memmem = _memmem_ptr.asFunction<_dart_memmem>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4_ptr =
      _lookup<ffi.NativeFunction<_c_memset_pattern4>>('memset_pattern4');
  late final _dart_memset_pattern4 _memset_pattern4 =
      _memset_pattern4_ptr.asFunction<_dart_memset_pattern4>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8_ptr =
      _lookup<ffi.NativeFunction<_c_memset_pattern8>>('memset_pattern8');
  late final _dart_memset_pattern8 _memset_pattern8 =
      _memset_pattern8_ptr.asFunction<_dart_memset_pattern8>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16_ptr =
      _lookup<ffi.NativeFunction<_c_memset_pattern16>>('memset_pattern16');
  late final _dart_memset_pattern16 _memset_pattern16 =
      _memset_pattern16_ptr.asFunction<_dart_memset_pattern16>();

  ffi.Pointer<ffi.Int8> strcasestr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestr_ptr =
      _lookup<ffi.NativeFunction<_c_strcasestr>>('strcasestr');
  late final _dart_strcasestr _strcasestr =
      _strcasestr_ptr.asFunction<_dart_strcasestr>();

  ffi.Pointer<ffi.Int8> strnstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstr_ptr = _lookup<ffi.NativeFunction<_c_strnstr>>('strnstr');
  late final _dart_strnstr _strnstr = _strnstr_ptr.asFunction<_dart_strnstr>();

  int strlcat(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcat_ptr = _lookup<ffi.NativeFunction<_c_strlcat>>('strlcat');
  late final _dart_strlcat _strlcat = _strlcat_ptr.asFunction<_dart_strlcat>();

  int strlcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpy_ptr = _lookup<ffi.NativeFunction<_c_strlcpy>>('strlcpy');
  late final _dart_strlcpy _strlcpy = _strlcpy_ptr.asFunction<_dart_strlcpy>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Int8> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmode_ptr = _lookup<ffi.NativeFunction<_c_strmode>>('strmode');
  late final _dart_strmode _strmode = _strmode_ptr.asFunction<_dart_strmode>();

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsep_ptr = _lookup<ffi.NativeFunction<_c_strsep>>('strsep');
  late final _dart_strsep _strsep = _strsep_ptr.asFunction<_dart_strsep>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swab_ptr = _lookup<ffi.NativeFunction<_c_swab>>('swab');
  late final _dart_swab _swab = _swab_ptr.asFunction<_dart_swab>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmp_ptr =
      _lookup<ffi.NativeFunction<_c_timingsafe_bcmp>>('timingsafe_bcmp');
  late final _dart_timingsafe_bcmp _timingsafe_bcmp =
      _timingsafe_bcmp_ptr.asFunction<_dart_timingsafe_bcmp>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Int8> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_r_ptr =
      _lookup<ffi.NativeFunction<_c_strsignal_r>>('strsignal_r');
  late final _dart_strsignal_r _strsignal_r =
      _strsignal_r_ptr.asFunction<_dart_strsignal_r>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmp_ptr = _lookup<ffi.NativeFunction<_c_bcmp>>('bcmp');
  late final _dart_bcmp _bcmp = _bcmp_ptr.asFunction<_dart_bcmp>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopy_ptr = _lookup<ffi.NativeFunction<_c_bcopy>>('bcopy');
  late final _dart_bcopy _bcopy = _bcopy_ptr.asFunction<_dart_bcopy>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzero_ptr = _lookup<ffi.NativeFunction<_c_bzero>>('bzero');
  late final _dart_bzero _bzero = _bzero_ptr.asFunction<_dart_bzero>();

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _index_ptr = _lookup<ffi.NativeFunction<_c_index>>('index');
  late final _dart_index _index = _index_ptr.asFunction<_dart_index>();

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindex_ptr = _lookup<ffi.NativeFunction<_c_rindex>>('rindex');
  late final _dart_rindex _rindex = _rindex_ptr.asFunction<_dart_rindex>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffs_ptr = _lookup<ffi.NativeFunction<_c_ffs>>('ffs');
  late final _dart_ffs _ffs = _ffs_ptr.asFunction<_dart_ffs>();

  int strcasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strcasecmp>>('strcasecmp');
  late final _dart_strcasecmp _strcasecmp =
      _strcasecmp_ptr.asFunction<_dart_strcasecmp>();

  int strncasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strncasecmp>>('strncasecmp');
  late final _dart_strncasecmp _strncasecmp =
      _strncasecmp_ptr.asFunction<_dart_strncasecmp>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffsl_ptr = _lookup<ffi.NativeFunction<_c_ffsl>>('ffsl');
  late final _dart_ffsl _ffsl = _ffsl_ptr.asFunction<_dart_ffsl>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsll_ptr = _lookup<ffi.NativeFunction<_c_ffsll>>('ffsll');
  late final _dart_ffsll _ffsll = _ffsll_ptr.asFunction<_dart_ffsll>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _fls_ptr = _lookup<ffi.NativeFunction<_c_fls>>('fls');
  late final _dart_fls _fls = _fls_ptr.asFunction<_dart_fls>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flsl_ptr = _lookup<ffi.NativeFunction<_c_flsl>>('flsl');
  late final _dart_flsl _flsl = _flsl_ptr.asFunction<_dart_flsl>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsll_ptr = _lookup<ffi.NativeFunction<_c_flsll>>('flsll');
  late final _dart_flsll _flsll = _flsll_ptr.asFunction<_dart_flsll>();

  int has_profile_embed(
    ffi.Pointer<ffi.Int32> image,
  ) {
    return _has_profile_embed(
      image,
    );
  }

  late final _has_profile_embed_ptr =
      _lookup<ffi.NativeFunction<_c_has_profile_embed>>('has_profile_embed');
  late final _dart_has_profile_embed _has_profile_embed =
      _has_profile_embed_ptr.asFunction<_dart_has_profile_embed>();

  void remove_profile(
    ffi.Pointer<ffi.Int32> image,
  ) {
    return _remove_profile(
      image,
    );
  }

  late final _remove_profile_ptr =
      _lookup<ffi.NativeFunction<_c_remove_profile>>('remove_profile');
  late final _dart_remove_profile _remove_profile =
      _remove_profile_ptr.asFunction<_dart_remove_profile>();

  int has_alpha_channel(
    ffi.Pointer<ffi.Int32> image,
  ) {
    return _has_alpha_channel(
      image,
    );
  }

  late final _has_alpha_channel_ptr =
      _lookup<ffi.NativeFunction<_c_has_alpha_channel>>('has_alpha_channel');
  late final _dart_has_alpha_channel _has_alpha_channel =
      _has_alpha_channel_ptr.asFunction<_dart_has_alpha_channel>();

  void vips_enable_cache_set_trace() {
    return _vips_enable_cache_set_trace();
  }

  late final _vips_enable_cache_set_trace_ptr =
      _lookup<ffi.NativeFunction<_c_vips_enable_cache_set_trace>>(
          'vips_enable_cache_set_trace');
  late final _dart_vips_enable_cache_set_trace _vips_enable_cache_set_trace =
      _vips_enable_cache_set_trace_ptr
          .asFunction<_dart_vips_enable_cache_set_trace>();

  int vips_affine_interpolator(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    double a,
    double b,
    double c,
    double d,
    ffi.Pointer<ffi.Int32> interpolator,
    int extend,
  ) {
    return _vips_affine_interpolator(
      in_1,
      out,
      a,
      b,
      c,
      d,
      interpolator,
      extend,
    );
  }

  late final _vips_affine_interpolator_ptr =
      _lookup<ffi.NativeFunction<_c_vips_affine_interpolator>>(
          'vips_affine_interpolator');
  late final _dart_vips_affine_interpolator _vips_affine_interpolator =
      _vips_affine_interpolator_ptr
          .asFunction<_dart_vips_affine_interpolator>();

  int vips_jpegload_buffer_shrink(
    ffi.Pointer<ffi.Void> buf,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int shrink,
  ) {
    return _vips_jpegload_buffer_shrink(
      buf,
      len,
      out,
      shrink,
    );
  }

  late final _vips_jpegload_buffer_shrink_ptr =
      _lookup<ffi.NativeFunction<_c_vips_jpegload_buffer_shrink>>(
          'vips_jpegload_buffer_shrink');
  late final _dart_vips_jpegload_buffer_shrink _vips_jpegload_buffer_shrink =
      _vips_jpegload_buffer_shrink_ptr
          .asFunction<_dart_vips_jpegload_buffer_shrink>();

  int vips_webpload_buffer_shrink(
    ffi.Pointer<ffi.Void> buf,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int shrink,
  ) {
    return _vips_webpload_buffer_shrink(
      buf,
      len,
      out,
      shrink,
    );
  }

  late final _vips_webpload_buffer_shrink_ptr =
      _lookup<ffi.NativeFunction<_c_vips_webpload_buffer_shrink>>(
          'vips_webpload_buffer_shrink');
  late final _dart_vips_webpload_buffer_shrink _vips_webpload_buffer_shrink =
      _vips_webpload_buffer_shrink_ptr
          .asFunction<_dart_vips_webpload_buffer_shrink>();

  int vips_flip_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int direction,
  ) {
    return _vips_flip_bridge(
      in_1,
      out,
      direction,
    );
  }

  late final _vips_flip_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_flip_bridge>>('vips_flip_bridge');
  late final _dart_vips_flip_bridge _vips_flip_bridge =
      _vips_flip_bridge_ptr.asFunction<_dart_vips_flip_bridge>();

  int vips_shrink_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    double xshrink,
    double yshrink,
  ) {
    return _vips_shrink_bridge(
      in_1,
      out,
      xshrink,
      yshrink,
    );
  }

  late final _vips_shrink_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_shrink_bridge>>('vips_shrink_bridge');
  late final _dart_vips_shrink_bridge _vips_shrink_bridge =
      _vips_shrink_bridge_ptr.asFunction<_dart_vips_shrink_bridge>();

  int vips_reduce_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    double xshrink,
    double yshrink,
  ) {
    return _vips_reduce_bridge(
      in_1,
      out,
      xshrink,
      yshrink,
    );
  }

  late final _vips_reduce_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_reduce_bridge>>('vips_reduce_bridge');
  late final _dart_vips_reduce_bridge _vips_reduce_bridge =
      _vips_reduce_bridge_ptr.asFunction<_dart_vips_reduce_bridge>();

  int vips_type_find_bridge(
    int t,
  ) {
    return _vips_type_find_bridge(
      t,
    );
  }

  late final _vips_type_find_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_type_find_bridge>>(
          'vips_type_find_bridge');
  late final _dart_vips_type_find_bridge _vips_type_find_bridge =
      _vips_type_find_bridge_ptr.asFunction<_dart_vips_type_find_bridge>();

  int vips_type_find_save_bridge(
    int t,
  ) {
    return _vips_type_find_save_bridge(
      t,
    );
  }

  late final _vips_type_find_save_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_type_find_save_bridge>>(
          'vips_type_find_save_bridge');
  late final _dart_vips_type_find_save_bridge _vips_type_find_save_bridge =
      _vips_type_find_save_bridge_ptr
          .asFunction<_dart_vips_type_find_save_bridge>();

  int vips_rotate_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int angle,
  ) {
    return _vips_rotate_bridge(
      in_1,
      out,
      angle,
    );
  }

  late final _vips_rotate_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_rotate_bridge>>('vips_rotate_bridge');
  late final _dart_vips_rotate_bridge _vips_rotate_bridge =
      _vips_rotate_bridge_ptr.asFunction<_dart_vips_rotate_bridge>();

  int vips_autorot_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ) {
    return _vips_autorot_bridge(
      in_1,
      out,
    );
  }

  late final _vips_autorot_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_autorot_bridge>>(
          'vips_autorot_bridge');
  late final _dart_vips_autorot_bridge _vips_autorot_bridge =
      _vips_autorot_bridge_ptr.asFunction<_dart_vips_autorot_bridge>();

  ffi.Pointer<ffi.Int8> vips_exif_tag(
    ffi.Pointer<ffi.Int32> image,
    ffi.Pointer<ffi.Int8> tag,
  ) {
    return _vips_exif_tag(
      image,
      tag,
    );
  }

  late final _vips_exif_tag_ptr =
      _lookup<ffi.NativeFunction<_c_vips_exif_tag>>('vips_exif_tag');
  late final _dart_vips_exif_tag _vips_exif_tag =
      _vips_exif_tag_ptr.asFunction<_dart_vips_exif_tag>();

  int vips_exif_tag_to_int(
    ffi.Pointer<ffi.Int32> image,
    ffi.Pointer<ffi.Int8> tag,
  ) {
    return _vips_exif_tag_to_int(
      image,
      tag,
    );
  }

  late final _vips_exif_tag_to_int_ptr =
      _lookup<ffi.NativeFunction<_c_vips_exif_tag_to_int>>(
          'vips_exif_tag_to_int');
  late final _dart_vips_exif_tag_to_int _vips_exif_tag_to_int =
      _vips_exif_tag_to_int_ptr.asFunction<_dart_vips_exif_tag_to_int>();

  int vips_exif_orientation(
    ffi.Pointer<ffi.Int32> image,
  ) {
    return _vips_exif_orientation(
      image,
    );
  }

  late final _vips_exif_orientation_ptr =
      _lookup<ffi.NativeFunction<_c_vips_exif_orientation>>(
          'vips_exif_orientation');
  late final _dart_vips_exif_orientation _vips_exif_orientation =
      _vips_exif_orientation_ptr.asFunction<_dart_vips_exif_orientation>();

  int interpolator_window_size(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _interpolator_window_size(
      name,
    );
  }

  late final _interpolator_window_size_ptr =
      _lookup<ffi.NativeFunction<_c_interpolator_window_size>>(
          'interpolator_window_size');
  late final _dart_interpolator_window_size _interpolator_window_size =
      _interpolator_window_size_ptr
          .asFunction<_dart_interpolator_window_size>();

  ffi.Pointer<ffi.Int8> vips_enum_nick_bridge(
    ffi.Pointer<ffi.Int32> image,
  ) {
    return _vips_enum_nick_bridge(
      image,
    );
  }

  late final _vips_enum_nick_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_enum_nick_bridge>>(
          'vips_enum_nick_bridge');
  late final _dart_vips_enum_nick_bridge _vips_enum_nick_bridge =
      _vips_enum_nick_bridge_ptr.asFunction<_dart_vips_enum_nick_bridge>();

  int vips_zoom_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int xfac,
    int yfac,
  ) {
    return _vips_zoom_bridge(
      in_1,
      out,
      xfac,
      yfac,
    );
  }

  late final _vips_zoom_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_zoom_bridge>>('vips_zoom_bridge');
  late final _dart_vips_zoom_bridge _vips_zoom_bridge =
      _vips_zoom_bridge_ptr.asFunction<_dart_vips_zoom_bridge>();

  int vips_embed_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int left,
    int top,
    int width,
    int height,
    int extend,
    double r,
    double g,
    double b,
  ) {
    return _vips_embed_bridge(
      in_1,
      out,
      left,
      top,
      width,
      height,
      extend,
      r,
      g,
      b,
    );
  }

  late final _vips_embed_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_embed_bridge>>('vips_embed_bridge');
  late final _dart_vips_embed_bridge _vips_embed_bridge =
      _vips_embed_bridge_ptr.asFunction<_dart_vips_embed_bridge>();

  int vips_extract_area_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int left,
    int top,
    int width,
    int height,
  ) {
    return _vips_extract_area_bridge(
      in_1,
      out,
      left,
      top,
      width,
      height,
    );
  }

  late final _vips_extract_area_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_extract_area_bridge>>(
          'vips_extract_area_bridge');
  late final _dart_vips_extract_area_bridge _vips_extract_area_bridge =
      _vips_extract_area_bridge_ptr
          .asFunction<_dart_vips_extract_area_bridge>();

  int vips_colourspace_issupported_bridge(
    ffi.Pointer<ffi.Int32> in_1,
  ) {
    return _vips_colourspace_issupported_bridge(
      in_1,
    );
  }

  late final _vips_colourspace_issupported_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_colourspace_issupported_bridge>>(
          'vips_colourspace_issupported_bridge');
  late final _dart_vips_colourspace_issupported_bridge
      _vips_colourspace_issupported_bridge =
      _vips_colourspace_issupported_bridge_ptr
          .asFunction<_dart_vips_colourspace_issupported_bridge>();

  int vips_image_guess_interpretation_bridge(
    ffi.Pointer<ffi.Int32> in_1,
  ) {
    return _vips_image_guess_interpretation_bridge(
      in_1,
    );
  }

  late final _vips_image_guess_interpretation_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_image_guess_interpretation_bridge>>(
          'vips_image_guess_interpretation_bridge');
  late final _dart_vips_image_guess_interpretation_bridge
      _vips_image_guess_interpretation_bridge =
      _vips_image_guess_interpretation_bridge_ptr
          .asFunction<_dart_vips_image_guess_interpretation_bridge>();

  int vips_colourspace_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int space,
  ) {
    return _vips_colourspace_bridge(
      in_1,
      out,
      space,
    );
  }

  late final _vips_colourspace_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_colourspace_bridge>>(
          'vips_colourspace_bridge');
  late final _dart_vips_colourspace_bridge _vips_colourspace_bridge =
      _vips_colourspace_bridge_ptr.asFunction<_dart_vips_colourspace_bridge>();

  int vips_icc_transform_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    ffi.Pointer<ffi.Int8> output_icc_profile,
  ) {
    return _vips_icc_transform_bridge(
      in_1,
      out,
      output_icc_profile,
    );
  }

  late final _vips_icc_transform_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_icc_transform_bridge>>(
          'vips_icc_transform_bridge');
  late final _dart_vips_icc_transform_bridge _vips_icc_transform_bridge =
      _vips_icc_transform_bridge_ptr
          .asFunction<_dart_vips_icc_transform_bridge>();

  int vips_icc_transform_with_default_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    ffi.Pointer<ffi.Int8> output_icc_profile,
    ffi.Pointer<ffi.Int8> input_icc_profile,
  ) {
    return _vips_icc_transform_with_default_bridge(
      in_1,
      out,
      output_icc_profile,
      input_icc_profile,
    );
  }

  late final _vips_icc_transform_with_default_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_icc_transform_with_default_bridge>>(
          'vips_icc_transform_with_default_bridge');
  late final _dart_vips_icc_transform_with_default_bridge
      _vips_icc_transform_with_default_bridge =
      _vips_icc_transform_with_default_bridge_ptr
          .asFunction<_dart_vips_icc_transform_with_default_bridge>();

  int vips_jpegsave_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
    ffi.Pointer<ffi.Uint64> len,
    int strip,
    int quality,
    int interlace,
  ) {
    return _vips_jpegsave_bridge(
      in_1,
      buf,
      len,
      strip,
      quality,
      interlace,
    );
  }

  late final _vips_jpegsave_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_jpegsave_bridge>>(
          'vips_jpegsave_bridge');
  late final _dart_vips_jpegsave_bridge _vips_jpegsave_bridge =
      _vips_jpegsave_bridge_ptr.asFunction<_dart_vips_jpegsave_bridge>();

  int vips_pngsave_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
    ffi.Pointer<ffi.Uint64> len,
    int strip,
    int compression,
    int quality,
    int interlace,
    int palette,
  ) {
    return _vips_pngsave_bridge(
      in_1,
      buf,
      len,
      strip,
      compression,
      quality,
      interlace,
      palette,
    );
  }

  late final _vips_pngsave_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_pngsave_bridge>>(
          'vips_pngsave_bridge');
  late final _dart_vips_pngsave_bridge _vips_pngsave_bridge =
      _vips_pngsave_bridge_ptr.asFunction<_dart_vips_pngsave_bridge>();

  int vips_webpsave_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
    ffi.Pointer<ffi.Uint64> len,
    int strip,
    int quality,
    int lossless,
  ) {
    return _vips_webpsave_bridge(
      in_1,
      buf,
      len,
      strip,
      quality,
      lossless,
    );
  }

  late final _vips_webpsave_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_webpsave_bridge>>(
          'vips_webpsave_bridge');
  late final _dart_vips_webpsave_bridge _vips_webpsave_bridge =
      _vips_webpsave_bridge_ptr.asFunction<_dart_vips_webpsave_bridge>();

  int vips_tiffsave_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
    ffi.Pointer<ffi.Uint64> len,
  ) {
    return _vips_tiffsave_bridge(
      in_1,
      buf,
      len,
    );
  }

  late final _vips_tiffsave_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_tiffsave_bridge>>(
          'vips_tiffsave_bridge');
  late final _dart_vips_tiffsave_bridge _vips_tiffsave_bridge =
      _vips_tiffsave_bridge_ptr.asFunction<_dart_vips_tiffsave_bridge>();

  int vips_avifsave_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
    ffi.Pointer<ffi.Uint64> len,
    int strip,
    int quality,
    int lossless,
    int speed,
  ) {
    return _vips_avifsave_bridge(
      in_1,
      buf,
      len,
      strip,
      quality,
      lossless,
      speed,
    );
  }

  late final _vips_avifsave_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_avifsave_bridge>>(
          'vips_avifsave_bridge');
  late final _dart_vips_avifsave_bridge _vips_avifsave_bridge =
      _vips_avifsave_bridge_ptr.asFunction<_dart_vips_avifsave_bridge>();

  int vips_heifsave_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
    ffi.Pointer<ffi.Uint64> len,
    int strip,
    int quality,
    int lossless,
  ) {
    return _vips_heifsave_bridge(
      in_1,
      buf,
      len,
      strip,
      quality,
      lossless,
    );
  }

  late final _vips_heifsave_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_heifsave_bridge>>(
          'vips_heifsave_bridge');
  late final _dart_vips_heifsave_bridge _vips_heifsave_bridge =
      _vips_heifsave_bridge_ptr.asFunction<_dart_vips_heifsave_bridge>();

  int vips_is_16bit(
    int interpretation,
  ) {
    return _vips_is_16bit(
      interpretation,
    );
  }

  late final _vips_is_16bit_ptr =
      _lookup<ffi.NativeFunction<_c_vips_is_16bit>>('vips_is_16bit');
  late final _dart_vips_is_16bit _vips_is_16bit =
      _vips_is_16bit_ptr.asFunction<_dart_vips_is_16bit>();

  int vips_flatten_background_brigde(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    double r,
    double g,
    double b,
  ) {
    return _vips_flatten_background_brigde(
      in_1,
      out,
      r,
      g,
      b,
    );
  }

  late final _vips_flatten_background_brigde_ptr =
      _lookup<ffi.NativeFunction<_c_vips_flatten_background_brigde>>(
          'vips_flatten_background_brigde');
  late final _dart_vips_flatten_background_brigde
      _vips_flatten_background_brigde = _vips_flatten_background_brigde_ptr
          .asFunction<_dart_vips_flatten_background_brigde>();

  int vips_init_image(
    ffi.Pointer<ffi.Void> buf,
    int len,
    int imageType,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ) {
    return _vips_init_image(
      buf,
      len,
      imageType,
      out,
    );
  }

  late final _vips_init_image_ptr =
      _lookup<ffi.NativeFunction<_c_vips_init_image>>('vips_init_image');
  late final _dart_vips_init_image _vips_init_image =
      _vips_init_image_ptr.asFunction<_dart_vips_init_image>();

  int vips_watermark_replicate(
    ffi.Pointer<ffi.Int32> orig,
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ) {
    return _vips_watermark_replicate(
      orig,
      in_1,
      out,
    );
  }

  late final _vips_watermark_replicate_ptr =
      _lookup<ffi.NativeFunction<_c_vips_watermark_replicate>>(
          'vips_watermark_replicate');
  late final _dart_vips_watermark_replicate _vips_watermark_replicate =
      _vips_watermark_replicate_ptr
          .asFunction<_dart_vips_watermark_replicate>();

  int vips_watermark(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    ffi.Pointer<WatermarkTextOptions> to,
    ffi.Pointer<WatermarkOptions> o,
  ) {
    return _vips_watermark(
      in_1,
      out,
      to,
      o,
    );
  }

  late final _vips_watermark_ptr =
      _lookup<ffi.NativeFunction<_c_vips_watermark>>('vips_watermark');
  late final _dart_vips_watermark _vips_watermark =
      _vips_watermark_ptr.asFunction<_dart_vips_watermark>();

  int vips_gaussblur_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    double sigma,
    double min_ampl,
  ) {
    return _vips_gaussblur_bridge(
      in_1,
      out,
      sigma,
      min_ampl,
    );
  }

  late final _vips_gaussblur_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_gaussblur_bridge>>(
          'vips_gaussblur_bridge');
  late final _dart_vips_gaussblur_bridge _vips_gaussblur_bridge =
      _vips_gaussblur_bridge_ptr.asFunction<_dart_vips_gaussblur_bridge>();

  int vips_sharpen_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int radius,
    double x1,
    double y2,
    double y3,
    double m1,
    double m2,
  ) {
    return _vips_sharpen_bridge(
      in_1,
      out,
      radius,
      x1,
      y2,
      y3,
      m1,
      m2,
    );
  }

  late final _vips_sharpen_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_sharpen_bridge>>(
          'vips_sharpen_bridge');
  late final _dart_vips_sharpen_bridge _vips_sharpen_bridge =
      _vips_sharpen_bridge_ptr.asFunction<_dart_vips_sharpen_bridge>();

  int vips_add_band(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    double c,
  ) {
    return _vips_add_band(
      in_1,
      out,
      c,
    );
  }

  late final _vips_add_band_ptr =
      _lookup<ffi.NativeFunction<_c_vips_add_band>>('vips_add_band');
  late final _dart_vips_add_band _vips_add_band =
      _vips_add_band_ptr.asFunction<_dart_vips_add_band>();

  int vips_watermark_image(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Int32> sub,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    ffi.Pointer<WatermarkImageOptions> o,
  ) {
    return _vips_watermark_image(
      in_1,
      sub,
      out,
      o,
    );
  }

  late final _vips_watermark_image_ptr =
      _lookup<ffi.NativeFunction<_c_vips_watermark_image>>(
          'vips_watermark_image');
  late final _dart_vips_watermark_image _vips_watermark_image =
      _vips_watermark_image_ptr.asFunction<_dart_vips_watermark_image>();

  int vips_smartcrop_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    int width,
    int height,
  ) {
    return _vips_smartcrop_bridge(
      in_1,
      out,
      width,
      height,
    );
  }

  late final _vips_smartcrop_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_smartcrop_bridge>>(
          'vips_smartcrop_bridge');
  late final _dart_vips_smartcrop_bridge _vips_smartcrop_bridge =
      _vips_smartcrop_bridge_ptr.asFunction<_dart_vips_smartcrop_bridge>();

  int vips_find_trim_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Int32> top,
    ffi.Pointer<ffi.Int32> left,
    ffi.Pointer<ffi.Int32> width,
    ffi.Pointer<ffi.Int32> height,
    double r,
    double g,
    double b,
    double threshold,
  ) {
    return _vips_find_trim_bridge(
      in_1,
      top,
      left,
      width,
      height,
      r,
      g,
      b,
      threshold,
    );
  }

  late final _vips_find_trim_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_find_trim_bridge>>(
          'vips_find_trim_bridge');
  late final _dart_vips_find_trim_bridge _vips_find_trim_bridge =
      _vips_find_trim_bridge_ptr.asFunction<_dart_vips_find_trim_bridge>();

  int vips_gamma_bridge(
    ffi.Pointer<ffi.Int32> in_1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
    double exponent,
  ) {
    return _vips_gamma_bridge(
      in_1,
      out,
      exponent,
    );
  }

  late final _vips_gamma_bridge_ptr =
      _lookup<ffi.NativeFunction<_c_vips_gamma_bridge>>('vips_gamma_bridge');
  late final _dart_vips_gamma_bridge _vips_gamma_bridge =
      _vips_gamma_bridge_ptr.asFunction<_dart_vips_gamma_bridge>();
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Opaque {}

class _opaque_pthread_cond_t extends ffi.Opaque {}

class _opaque_pthread_condattr_t extends ffi.Opaque {}

class _opaque_pthread_mutex_t extends ffi.Opaque {}

class _opaque_pthread_mutexattr_t extends ffi.Opaque {}

class _opaque_pthread_once_t extends ffi.Opaque {}

class _opaque_pthread_rwlock_t extends ffi.Opaque {}

class _opaque_pthread_rwlockattr_t extends ffi.Opaque {}

class _opaque_pthread_t extends ffi.Opaque {}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class __darwin_i386_thread_state extends ffi.Struct {
  @ffi.Uint32()
  external int __eax;

  @ffi.Uint32()
  external int __ebx;

  @ffi.Uint32()
  external int __ecx;

  @ffi.Uint32()
  external int __edx;

  @ffi.Uint32()
  external int __edi;

  @ffi.Uint32()
  external int __esi;

  @ffi.Uint32()
  external int __ebp;

  @ffi.Uint32()
  external int __esp;

  @ffi.Uint32()
  external int __ss;

  @ffi.Uint32()
  external int __eflags;

  @ffi.Uint32()
  external int __eip;

  @ffi.Uint32()
  external int __cs;

  @ffi.Uint32()
  external int __ds;

  @ffi.Uint32()
  external int __es;

  @ffi.Uint32()
  external int __fs;

  @ffi.Uint32()
  external int __gs;
}

class __darwin_fp_control extends ffi.Opaque {}

class __darwin_fp_status extends ffi.Opaque {}

class __darwin_mmst_reg extends ffi.Opaque {}

class __darwin_xmm_reg extends ffi.Opaque {}

class __darwin_ymm_reg extends ffi.Opaque {}

class __darwin_zmm_reg extends ffi.Opaque {}

class __darwin_opmask_reg extends ffi.Opaque {}

class __darwin_i386_float_state extends ffi.Opaque {}

class __darwin_i386_avx_state extends ffi.Opaque {}

class __darwin_i386_avx512_state extends ffi.Opaque {}

class __darwin_i386_exception_state extends ffi.Struct {
  @ffi.Uint16()
  external int __trapno;

  @ffi.Uint16()
  external int __cpu;

  @ffi.Uint32()
  external int __err;

  @ffi.Uint32()
  external int __faultvaddr;
}

class __darwin_x86_debug_state32 extends ffi.Struct {
  @ffi.Uint32()
  external int __dr0;

  @ffi.Uint32()
  external int __dr1;

  @ffi.Uint32()
  external int __dr2;

  @ffi.Uint32()
  external int __dr3;

  @ffi.Uint32()
  external int __dr4;

  @ffi.Uint32()
  external int __dr5;

  @ffi.Uint32()
  external int __dr6;

  @ffi.Uint32()
  external int __dr7;
}

class __x86_instruction_state extends ffi.Opaque {}

class __last_branch_record extends ffi.Opaque {}

class __last_branch_state extends ffi.Opaque {}

class __x86_pagein_state extends ffi.Struct {
  @ffi.Int32()
  external int __pagein_error;
}

class __darwin_x86_thread_state64 extends ffi.Struct {
  @ffi.Uint64()
  external int __rax;

  @ffi.Uint64()
  external int __rbx;

  @ffi.Uint64()
  external int __rcx;

  @ffi.Uint64()
  external int __rdx;

  @ffi.Uint64()
  external int __rdi;

  @ffi.Uint64()
  external int __rsi;

  @ffi.Uint64()
  external int __rbp;

  @ffi.Uint64()
  external int __rsp;

  @ffi.Uint64()
  external int __r8;

  @ffi.Uint64()
  external int __r9;

  @ffi.Uint64()
  external int __r10;

  @ffi.Uint64()
  external int __r11;

  @ffi.Uint64()
  external int __r12;

  @ffi.Uint64()
  external int __r13;

  @ffi.Uint64()
  external int __r14;

  @ffi.Uint64()
  external int __r15;

  @ffi.Uint64()
  external int __rip;

  @ffi.Uint64()
  external int __rflags;

  @ffi.Uint64()
  external int __cs;

  @ffi.Uint64()
  external int __fs;

  @ffi.Uint64()
  external int __gs;
}

class __darwin_x86_thread_full_state64 extends ffi.Struct {
  external __darwin_x86_thread_state64 __ss64;

  @ffi.Uint64()
  external int __ds;

  @ffi.Uint64()
  external int __es;

  @ffi.Uint64()
  external int __ss;

  @ffi.Uint64()
  external int __gsbase;
}

class __darwin_x86_float_state64 extends ffi.Opaque {}

class __darwin_x86_avx_state64 extends ffi.Opaque {}

class __darwin_x86_avx512_state64 extends ffi.Opaque {}

class __darwin_x86_exception_state64 extends ffi.Struct {
  @ffi.Uint16()
  external int __trapno;

  @ffi.Uint16()
  external int __cpu;

  @ffi.Uint32()
  external int __err;

  @ffi.Uint64()
  external int __faultvaddr;
}

class __darwin_x86_debug_state64 extends ffi.Struct {
  @ffi.Uint64()
  external int __dr0;

  @ffi.Uint64()
  external int __dr1;

  @ffi.Uint64()
  external int __dr2;

  @ffi.Uint64()
  external int __dr3;

  @ffi.Uint64()
  external int __dr4;

  @ffi.Uint64()
  external int __dr5;

  @ffi.Uint64()
  external int __dr6;

  @ffi.Uint64()
  external int __dr7;
}

class __darwin_x86_cpmu_state64 extends ffi.Opaque {}

class __darwin_mcontext32 extends ffi.Opaque {}

class __darwin_mcontext_avx32 extends ffi.Opaque {}

class __darwin_mcontext_avx512_32 extends ffi.Opaque {}

class __darwin_mcontext64 extends ffi.Opaque {}

class __darwin_mcontext64_full extends ffi.Opaque {}

class __darwin_mcontext_avx64 extends ffi.Opaque {}

class __darwin_mcontext_avx64_full extends ffi.Opaque {}

class __darwin_mcontext_avx512_64 extends ffi.Opaque {}

class __darwin_mcontext_avx512_64_full extends ffi.Opaque {}

class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Uint64()
  external int ss_size;

  @ffi.Int32()
  external int ss_flags;
}

class __darwin_ucontext extends ffi.Struct {
  @ffi.Int32()
  external int uc_onstack;

  @ffi.Uint32()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @ffi.Uint64()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

class sigevent extends ffi.Opaque {}

class siginfo_t extends ffi.Opaque {}

class __sigaction extends ffi.Opaque {}

class sigaction extends ffi.Opaque {}

class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> sv_handler;

  @ffi.Int32()
  external int sv_mask;

  @ffi.Int32()
  external int sv_flags;
}

class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ss_sp;

  @ffi.Int32()
  external int ss_onstack;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int32()
  external int tv_usec;
}

class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Int64()
  external int ru_maxrss;

  @ffi.Int64()
  external int ru_ixrss;

  @ffi.Int64()
  external int ru_idrss;

  @ffi.Int64()
  external int ru_isrss;

  @ffi.Int64()
  external int ru_minflt;

  @ffi.Int64()
  external int ru_majflt;

  @ffi.Int64()
  external int ru_nswap;

  @ffi.Int64()
  external int ru_inblock;

  @ffi.Int64()
  external int ru_oublock;

  @ffi.Int64()
  external int ru_msgsnd;

  @ffi.Int64()
  external int ru_msgrcv;

  @ffi.Int64()
  external int ru_nsignals;

  @ffi.Int64()
  external int ru_nvcsw;

  @ffi.Int64()
  external int ru_nivcsw;
}

class rusage_info_v0 extends ffi.Opaque {}

class rusage_info_v1 extends ffi.Opaque {}

class rusage_info_v2 extends ffi.Opaque {}

class rusage_info_v3 extends ffi.Opaque {}

class rusage_info_v4 extends ffi.Opaque {}

class rusage_info_v5 extends ffi.Opaque {}

class rlimit extends ffi.Struct {
  @ffi.Uint64()
  external int rlim_cur;

  @ffi.Uint64()
  external int rlim_max;
}

class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

abstract class types {
  static const int UNKNOWN = 0;
  static const int JPEG = 1;
  static const int WEBP = 2;
  static const int PNG = 3;
  static const int TIFF = 4;
  static const int GIF = 5;
  static const int PDF = 6;
  static const int SVG = 7;
  static const int MAGICK = 8;
  static const int HEIF = 9;
  static const int AVIF = 10;
}

class WatermarkTextOptions extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> Text;

  external ffi.Pointer<ffi.Int8> Font;
}

class WatermarkOptions extends ffi.Opaque {}

class WatermarkImageOptions extends ffi.Struct {
  @ffi.Int32()
  external int Left;

  @ffi.Int32()
  external int Top;

  @ffi.Float()
  external double Opacity;
}

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 110000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 110100;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _I386_SIGNAL_H_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int USER_ADDR_NULL = 0;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int _X86_INSTRUCTION_STATE_MAX_INSN_BYTES = 2380;

const int _X86_INSTRUCTION_STATE_CACHELINE_SIZE = 64;

const int __LASTBRANCH_MAX = 32;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_CURRENT = 5;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int NULL = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const String EXIF_IFD0_ORIENTATION = 'exif-ifd0-Orientation';

typedef _typedefC_4 = ffi.Void Function(
  ffi.Int32,
);

typedef _typedefC_5 = ffi.Void Function(
  ffi.Int32,
);

typedef _c_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
);

typedef _dart_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Function(
  int arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
);

typedef _c_getpriority = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_getpriority = int Function(
  int arg0,
  int arg1,
);

typedef _c_getiopolicy_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_getiopolicy_np = int Function(
  int arg0,
  int arg1,
);

typedef _c_getrlimit = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _dart_getrlimit = int Function(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _c_getrusage = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rusage> arg1,
);

typedef _dart_getrusage = int Function(
  int arg0,
  ffi.Pointer<rusage> arg1,
);

typedef _c_setpriority = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_setpriority = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_setiopolicy_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_setiopolicy_np = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_setrlimit = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _dart_setrlimit = int Function(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _c_wait = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_wait = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_waitpid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
);

typedef _dart_waitpid = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_waitid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<siginfo_t> arg2,
  ffi.Int32 arg3,
);

typedef _dart_waitid = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<siginfo_t> arg2,
  int arg3,
);

typedef _c_wait3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<rusage> arg2,
);

typedef _dart_wait3 = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
  ffi.Pointer<rusage> arg2,
);

typedef _c_wait4 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<rusage> arg3,
);

typedef _dart_wait4 = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
  ffi.Pointer<rusage> arg3,
);

typedef _c_alloca = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_alloca = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_malloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __count,
  ffi.Uint64 __size,
);

typedef _dart_calloc = ffi.Pointer<ffi.Void> Function(
  int __count,
  int __size,
);

typedef _c_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_free = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_valloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_valloc = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  int __alignment,
  int __size,
);

typedef _c_posix_memalign = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_posix_memalign = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

typedef _c_abort = ffi.Void Function();

typedef _dart_abort = void Function();

typedef _c_abs = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_abs = int Function(
  int arg0,
);

typedef _typedefC_6 = ffi.Void Function();

typedef _c_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
);

typedef _dart_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
);

typedef _c_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atof = double Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atoi = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atol = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atoll = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
);

typedef _dart_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
);

typedef _c_div = div_t Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_div = div_t Function(
  int arg0,
  int arg1,
);

typedef _c_exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_exit = void Function(
  int arg0,
);

typedef _c_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_labs = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_labs = int Function(
  int arg0,
);

typedef _c_ldiv = ldiv_t Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart_ldiv = ldiv_t Function(
  int arg0,
  int arg1,
);

typedef _c_llabs = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_llabs = int Function(
  int arg0,
);

typedef _c_lldiv = lldiv_t Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart_lldiv = lldiv_t Function(
  int arg0,
  int arg1,
);

typedef _c_mblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mblen = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_mbstowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_mbstowcs = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_mbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_mbtowc = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _typedefC_8 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
);

typedef _dart_qsort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
);

typedef _c_rand = ffi.Int32 Function();

typedef _dart_rand = int Function();

typedef _c_srand = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart_srand = void Function(
  int arg0,
);

typedef _c_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_strtod = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_strtof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_strtof = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtol = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoll = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoul = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoull = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_system = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_system = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_wcstombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_wcstombs = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_wctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_wctomb = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c__Exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart__Exit = void Function(
  int arg0,
);

typedef _c_a64l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_a64l = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_drand48 = ffi.Double Function();

typedef _dart_drand48 = double Function();

typedef _c_ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_ecvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_erand48 = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_erand48 = double Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_fcvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_gcvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_getsubopt = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_getsubopt = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_grantpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_grantpt = int Function(
  int arg0,
);

typedef _c_initstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_initstate = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_jrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_jrand48 = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_l64a = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 arg0,
);

typedef _dart_l64a = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_lcong48 = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_lcong48 = void Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_lrand48 = ffi.Int64 Function();

typedef _dart_lrand48 = int Function();

typedef _c_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mkstemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mkstemp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mrand48 = ffi.Int64 Function();

typedef _dart_mrand48 = int Function();

typedef _c_nrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_nrand48 = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_posix_openpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_posix_openpt = int Function(
  int arg0,
);

typedef _c_ptsname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
);

typedef _dart_ptsname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_ptsname_r = ffi.Int32 Function(
  ffi.Int32 fildes,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_ptsname_r = int Function(
  int fildes,
  ffi.Pointer<ffi.Int8> buffer,
  int buflen,
);

typedef _c_putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_putenv = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_random = ffi.Int64 Function();

typedef _dart_random = int Function();

typedef _c_rand_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_rand_r = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_setenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  ffi.Int32 __overwrite,
);

typedef _dart_setenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  int __overwrite,
);

typedef _c_setkey = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setkey = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_srand48 = ffi.Void Function(
  ffi.Int64 arg0,
);

typedef _dart_srand48 = void Function(
  int arg0,
);

typedef _c_srandom = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart_srandom = void Function(
  int arg0,
);

typedef _c_unlockpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_unlockpt = int Function(
  int arg0,
);

typedef _c_unsetenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_unsetenv = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_arc4random = ffi.Uint32 Function();

typedef _dart_arc4random = int Function();

typedef _c_arc4random_addrandom = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_arc4random_addrandom = void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  int arg1,
);

typedef _c_arc4random_buf = ffi.Void Function(
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
);

typedef _dart_arc4random_buf = void Function(
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef _c_arc4random_stir = ffi.Void Function();

typedef _dart_arc4random_stir = void Function();

typedef _c_arc4random_uniform = ffi.Uint32 Function(
  ffi.Uint32 __upper_bound,
);

typedef _dart_arc4random_uniform = int Function(
  int __upper_bound,
);

typedef _c_cgetcap = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_cgetcap = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_cgetclose = ffi.Int32 Function();

typedef _dart_cgetclose = int Function();

typedef _c_cgetent = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_cgetent = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_cgetfirst = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_cgetfirst = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_cgetmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_cgetmatch = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_cgetnext = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_cgetnext = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_cgetnum = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int64> arg2,
);

typedef _dart_cgetnum = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int64> arg2,
);

typedef _c_cgetset = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_cgetset = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_cgetstr = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_cgetstr = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_cgetustr = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_cgetustr = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_daemon = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_daemon = int Function(
  int arg0,
  int arg1,
);

typedef _c_devname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
  ffi.Uint16 arg1,
);

typedef _dart_devname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  int arg1,
);

typedef _c_devname_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
  ffi.Uint16 arg1,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 len,
);

typedef _dart_devname_r = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> buf,
  int len,
);

typedef _c_getbsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_getbsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_getloadavg = ffi.Int32 Function(
  ffi.Pointer<ffi.Double> arg0,
  ffi.Int32 arg1,
);

typedef _dart_getloadavg = int Function(
  ffi.Pointer<ffi.Double> arg0,
  int arg1,
);

typedef _c_getprogname = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getprogname = ffi.Pointer<ffi.Int8> Function();

typedef _c_setprogname = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setprogname = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_heapsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
);

typedef _dart_heapsort = int Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_mergesort = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
);

typedef _dart_mergesort = int Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_psort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
);

typedef _dart_psort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_psort_r = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
);

typedef _dart_psort_r = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_qsort_r = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
);

typedef _dart_qsort_r = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
);

typedef _c_radixsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  ffi.Int32 __nel,
  ffi.Pointer<ffi.Uint8> __table,
  ffi.Uint32 __endbyte,
);

typedef _dart_radixsort = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  int __nel,
  ffi.Pointer<ffi.Uint8> __table,
  int __endbyte,
);

typedef _c_rpmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_rpmatch = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_sradixsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  ffi.Int32 __nel,
  ffi.Pointer<ffi.Uint8> __table,
  ffi.Uint32 __endbyte,
);

typedef _dart_sradixsort = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  int __nel,
  ffi.Pointer<ffi.Uint8> __table,
  int __endbyte,
);

typedef _c_sranddev = ffi.Void Function();

typedef _dart_sranddev = void Function();

typedef _c_srandomdev = ffi.Void Function();

typedef _dart_srandomdev = void Function();

typedef _c_reallocf = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_reallocf = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_strtonum = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __numstr,
  ffi.Int64 __minval,
  ffi.Int64 __maxval,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
);

typedef _dart_strtonum = int Function(
  ffi.Pointer<ffi.Int8> __numstr,
  int __minval,
  int __maxval,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
);

typedef _c_strtoq = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoq = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtouq = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtouq = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __len,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __len,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Int32 __c,
  ffi.Uint64 __len,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __b,
  int __c,
  int __len,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
);

typedef _c_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
);

typedef _c_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
);

typedef _dart_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
);

typedef _c_strerror_r = ffi.Int32 Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __strerrbuf,
  ffi.Uint64 __buflen,
);

typedef _dart_strerror_r = int Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __strerrbuf,
  int __buflen,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

typedef _c_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Uint64 __n,
);

typedef _dart_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  int __n,
);

typedef _c_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Uint64 __n,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  int __n,
);

typedef _c_strsignal = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __sig,
);

typedef _dart_strsignal = ffi.Pointer<ffi.Int8> Function(
  int __sig,
);

typedef _c_memset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __smax,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memset_s = int Function(
  ffi.Pointer<ffi.Void> __s,
  int __smax,
  int __c,
  int __n,
);

typedef _c_memmem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __big,
  ffi.Uint64 __big_len,
  ffi.Pointer<ffi.Void> __little,
  ffi.Uint64 __little_len,
);

typedef _dart_memmem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __big,
  int __big_len,
  ffi.Pointer<ffi.Void> __little,
  int __little_len,
);

typedef _c_memset_pattern4 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern4,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern4 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern4,
  int __len,
);

typedef _c_memset_pattern8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern8,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern8 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern8,
  int __len,
);

typedef _c_memset_pattern16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern16,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern16 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern16,
  int __len,
);

typedef _c_strcasestr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _dart_strcasestr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _c_strnstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
  ffi.Uint64 __len,
);

typedef _dart_strnstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
  int __len,
);

typedef _c_strlcat = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  ffi.Uint64 __size,
);

typedef _dart_strlcat = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  int __size,
);

typedef _c_strlcpy = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  ffi.Uint64 __size,
);

typedef _dart_strlcpy = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  int __size,
);

typedef _c_strmode = ffi.Void Function(
  ffi.Int32 __mode,
  ffi.Pointer<ffi.Int8> __bp,
);

typedef _dart_strmode = void Function(
  int __mode,
  ffi.Pointer<ffi.Int8> __bp,
);

typedef _c_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c_swab = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Int64 arg2,
);

typedef _dart_swab = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_timingsafe_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __b1,
  ffi.Pointer<ffi.Void> __b2,
  ffi.Uint64 __len,
);

typedef _dart_timingsafe_bcmp = int Function(
  ffi.Pointer<ffi.Void> __b1,
  ffi.Pointer<ffi.Void> __b2,
  int __len,
);

typedef _c_strsignal_r = ffi.Int32 Function(
  ffi.Int32 __sig,
  ffi.Pointer<ffi.Int8> __strsignalbuf,
  ffi.Uint64 __buflen,
);

typedef _dart_strsignal_r = int Function(
  int __sig,
  ffi.Pointer<ffi.Int8> __strsignalbuf,
  int __buflen,
);

typedef _c_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_bcmp = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_bcopy = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_bcopy = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_bzero = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_ffs = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_ffs = int Function(
  int arg0,
);

typedef _c_strcasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_strcasecmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_strncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_strncasecmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_ffsl = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_ffsl = int Function(
  int arg0,
);

typedef _c_ffsll = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_ffsll = int Function(
  int arg0,
);

typedef _c_fls = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_fls = int Function(
  int arg0,
);

typedef _c_flsl = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_flsl = int Function(
  int arg0,
);

typedef _c_flsll = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_flsll = int Function(
  int arg0,
);

typedef _c_has_profile_embed = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _dart_has_profile_embed = int Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _c_remove_profile = ffi.Void Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _dart_remove_profile = void Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _c_has_alpha_channel = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _dart_has_alpha_channel = int Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _c_vips_enable_cache_set_trace = ffi.Void Function();

typedef _dart_vips_enable_cache_set_trace = void Function();

typedef _c_vips_affine_interpolator = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Double a,
  ffi.Double b,
  ffi.Double c,
  ffi.Double d,
  ffi.Pointer<ffi.Int32> interpolator,
  ffi.Int32 extend,
);

typedef _dart_vips_affine_interpolator = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  double a,
  double b,
  double c,
  double d,
  ffi.Pointer<ffi.Int32> interpolator,
  int extend,
);

typedef _c_vips_jpegload_buffer_shrink = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint64 len,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 shrink,
);

typedef _dart_vips_jpegload_buffer_shrink = int Function(
  ffi.Pointer<ffi.Void> buf,
  int len,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int shrink,
);

typedef _c_vips_webpload_buffer_shrink = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint64 len,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 shrink,
);

typedef _dart_vips_webpload_buffer_shrink = int Function(
  ffi.Pointer<ffi.Void> buf,
  int len,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int shrink,
);

typedef _c_vips_flip_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 direction,
);

typedef _dart_vips_flip_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int direction,
);

typedef _c_vips_shrink_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Double xshrink,
  ffi.Double yshrink,
);

typedef _dart_vips_shrink_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  double xshrink,
  double yshrink,
);

typedef _c_vips_reduce_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Double xshrink,
  ffi.Double yshrink,
);

typedef _dart_vips_reduce_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  double xshrink,
  double yshrink,
);

typedef _c_vips_type_find_bridge = ffi.Int32 Function(
  ffi.Int32 t,
);

typedef _dart_vips_type_find_bridge = int Function(
  int t,
);

typedef _c_vips_type_find_save_bridge = ffi.Int32 Function(
  ffi.Int32 t,
);

typedef _dart_vips_type_find_save_bridge = int Function(
  int t,
);

typedef _c_vips_rotate_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 angle,
);

typedef _dart_vips_rotate_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int angle,
);

typedef _c_vips_autorot_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
);

typedef _dart_vips_autorot_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
);

typedef _c_vips_exif_tag = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> image,
  ffi.Pointer<ffi.Int8> tag,
);

typedef _dart_vips_exif_tag = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> image,
  ffi.Pointer<ffi.Int8> tag,
);

typedef _c_vips_exif_tag_to_int = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> image,
  ffi.Pointer<ffi.Int8> tag,
);

typedef _dart_vips_exif_tag_to_int = int Function(
  ffi.Pointer<ffi.Int32> image,
  ffi.Pointer<ffi.Int8> tag,
);

typedef _c_vips_exif_orientation = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _dart_vips_exif_orientation = int Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _c_interpolator_window_size = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_interpolator_window_size = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_vips_enum_nick_bridge = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _dart_vips_enum_nick_bridge = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _c_vips_zoom_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 xfac,
  ffi.Int32 yfac,
);

typedef _dart_vips_zoom_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int xfac,
  int yfac,
);

typedef _c_vips_embed_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 extend,
  ffi.Double r,
  ffi.Double g,
  ffi.Double b,
);

typedef _dart_vips_embed_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int left,
  int top,
  int width,
  int height,
  int extend,
  double r,
  double g,
  double b,
);

typedef _c_vips_extract_area_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_vips_extract_area_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int left,
  int top,
  int width,
  int height,
);

typedef _c_vips_colourspace_issupported_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
);

typedef _dart_vips_colourspace_issupported_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
);

typedef _c_vips_image_guess_interpretation_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
);

typedef _dart_vips_image_guess_interpretation_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
);

typedef _c_vips_colourspace_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 space,
);

typedef _dart_vips_colourspace_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int space,
);

typedef _c_vips_icc_transform_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Pointer<ffi.Int8> output_icc_profile,
);

typedef _dart_vips_icc_transform_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Pointer<ffi.Int8> output_icc_profile,
);

typedef _c_vips_icc_transform_with_default_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Pointer<ffi.Int8> output_icc_profile,
  ffi.Pointer<ffi.Int8> input_icc_profile,
);

typedef _dart_vips_icc_transform_with_default_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Pointer<ffi.Int8> output_icc_profile,
  ffi.Pointer<ffi.Int8> input_icc_profile,
);

typedef _c_vips_jpegsave_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  ffi.Int32 strip,
  ffi.Int32 quality,
  ffi.Int32 interlace,
);

typedef _dart_vips_jpegsave_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  int strip,
  int quality,
  int interlace,
);

typedef _c_vips_pngsave_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  ffi.Int32 strip,
  ffi.Int32 compression,
  ffi.Int32 quality,
  ffi.Int32 interlace,
  ffi.Int32 palette,
);

typedef _dart_vips_pngsave_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  int strip,
  int compression,
  int quality,
  int interlace,
  int palette,
);

typedef _c_vips_webpsave_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  ffi.Int32 strip,
  ffi.Int32 quality,
  ffi.Int32 lossless,
);

typedef _dart_vips_webpsave_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  int strip,
  int quality,
  int lossless,
);

typedef _c_vips_tiffsave_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
);

typedef _dart_vips_tiffsave_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
);

typedef _c_vips_avifsave_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  ffi.Int32 strip,
  ffi.Int32 quality,
  ffi.Int32 lossless,
  ffi.Int32 speed,
);

typedef _dart_vips_avifsave_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  int strip,
  int quality,
  int lossless,
  int speed,
);

typedef _c_vips_heifsave_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  ffi.Int32 strip,
  ffi.Int32 quality,
  ffi.Int32 lossless,
);

typedef _dart_vips_heifsave_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
  ffi.Pointer<ffi.Uint64> len,
  int strip,
  int quality,
  int lossless,
);

typedef _c_vips_is_16bit = ffi.Int32 Function(
  ffi.Int32 interpretation,
);

typedef _dart_vips_is_16bit = int Function(
  int interpretation,
);

typedef _c_vips_flatten_background_brigde = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Double r,
  ffi.Double g,
  ffi.Double b,
);

typedef _dart_vips_flatten_background_brigde = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  double r,
  double g,
  double b,
);

typedef _c_vips_init_image = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint64 len,
  ffi.Int32 imageType,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
);

typedef _dart_vips_init_image = int Function(
  ffi.Pointer<ffi.Void> buf,
  int len,
  int imageType,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
);

typedef _c_vips_watermark_replicate = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> orig,
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
);

typedef _dart_vips_watermark_replicate = int Function(
  ffi.Pointer<ffi.Int32> orig,
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
);

typedef _c_vips_watermark = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Pointer<WatermarkTextOptions> to,
  ffi.Pointer<WatermarkOptions> o,
);

typedef _dart_vips_watermark = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Pointer<WatermarkTextOptions> to,
  ffi.Pointer<WatermarkOptions> o,
);

typedef _c_vips_gaussblur_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Double sigma,
  ffi.Double min_ampl,
);

typedef _dart_vips_gaussblur_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  double sigma,
  double min_ampl,
);

typedef _c_vips_sharpen_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 radius,
  ffi.Double x1,
  ffi.Double y2,
  ffi.Double y3,
  ffi.Double m1,
  ffi.Double m2,
);

typedef _dart_vips_sharpen_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int radius,
  double x1,
  double y2,
  double y3,
  double m1,
  double m2,
);

typedef _c_vips_add_band = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Double c,
);

typedef _dart_vips_add_band = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  double c,
);

typedef _c_vips_watermark_image = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Int32> sub,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Pointer<WatermarkImageOptions> o,
);

typedef _dart_vips_watermark_image = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Int32> sub,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Pointer<WatermarkImageOptions> o,
);

typedef _c_vips_smartcrop_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_vips_smartcrop_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  int width,
  int height,
);

typedef _c_vips_find_trim_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Int32> top,
  ffi.Pointer<ffi.Int32> left,
  ffi.Pointer<ffi.Int32> width,
  ffi.Pointer<ffi.Int32> height,
  ffi.Double r,
  ffi.Double g,
  ffi.Double b,
  ffi.Double threshold,
);

typedef _dart_vips_find_trim_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Int32> top,
  ffi.Pointer<ffi.Int32> left,
  ffi.Pointer<ffi.Int32> width,
  ffi.Pointer<ffi.Int32> height,
  double r,
  double g,
  double b,
  double threshold,
);

typedef _c_vips_gamma_bridge = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  ffi.Double exponent,
);

typedef _dart_vips_gamma_bridge = int Function(
  ffi.Pointer<ffi.Int32> in_1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> out,
  double exponent,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Int32,
);
